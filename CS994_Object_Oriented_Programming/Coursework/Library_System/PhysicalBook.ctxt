#BlueJ class context
comment0.target=PhysicalBook
comment0.text=\n\ Represents\ a\ physical\ book\ in\ the\ library\ system.<p>\n\ \n\ Extends\ the\ {@link\ LibraryResource}\ class\ and\ includes\ additional\ information\ \n\ specific\ to\ physical\ books,\ such\ as\ ISBN,\ author,\ damages\ and\ borowing\ details.\ <p>\n\n\ <b>Version\ 1.1\ Notes\:</b><br>\n\ -\ Added\ the\ {@code\ getDetails}\ method\ to\ generate\ the\ book\ details\ as\ a\ String.<br>\n\ -\ removed\ {@code\ printDetails}\ method\ as\ defined\ by\ superclass.<br>\n\n\ @author\ Neil\ Hutton\n\ @version\ 1.1\n
comment1.params=title\ isbn\ author
comment1.target=PhysicalBook(java.lang.String,\ java.lang.String,\ Author)
comment1.text=\n\ Constructs\ a\ new\ PhysicalBook\ object\ with\ the\ specified\ title,\ ISBN\ and\ author.\n\ \n\ @param\ title\ \ \ \ \ the\ title\ of\ the\ book\n\ @param\ isbn\ \ \ \ \ \ the\ ISBN\ of\ the\ book\n\ @param\ author\ \ \ \ the\ author\ of\ the\ book\n
comment10.params=damage
comment10.target=void\ addDamage(java.lang.String)
comment10.text=\n\ Adds\ a\ damage\ description\ to\ the\ book's\ damage\ list.\n\ \n\ @param\ damage\ the\ damage\ description\ to\ add\n
comment11.params=
comment11.target=boolean\ isAvailable()
comment11.text=\n\ Determines\ whether\ the\ book\ is\ available\ for\ borrowing.<p>\n\ \n\ This\ method\ checks\ if\ the\ book\ is\ currently\ associated\ with\ a\ library\ member.\ If\ \n\ no\ member\ has\ borrowed\ the\ book\ (i.e.,\ the\ {@code\ libraryMember}\ field\ is\ {@code\ null}),\ the\ \n\ book\ is\ considered\ available.<p>\n\ \n\ This\ method\ does\ not\ verify\ the\ book's\ existence\ in\ the\ library\ catalog\ or\ any\ other\ \n\ external\ conditions.\ Such\ checks\ are\ handled\ by\ the\ {@code\ Library}\ class.<p>\n\ \n\ @return\ {@code\ true}\ if\ the\ book\ is\ not\ currently\ borrowed\ by\ any\ member;\ \n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\n
comment12.params=
comment12.target=java.lang.String\ getDetails()
comment12.text=\n\ Generates\ a\ string\ containing\ the\ details\ of\ the\ book.\n\ \n\ @return\ a\ string\ representation\ of\ the\ book\n
comment2.params=
comment2.target=java.lang.String\ getIsbn()
comment2.text=\n\ Gets\ the\ ISBN\ of\ the\ book.\n\ \n\ @return\ the\ ISBN\ of\ the\ book\n
comment3.params=isbn
comment3.target=void\ setIsbn(java.lang.String)
comment3.text=\n\ Sets\ the\ ISBN\ of\ the\ book.\n\ \n\ @param\ the\ new\ ISBN\ of\ the\ book\n
comment4.params=
comment4.target=Author\ getAuthor()
comment4.text=\n\ Gets\ the\ author\ of\ the\ book.\n\ \n\ @return\ the\ author\ of\ the\ book,\ or\ null\ if\ no\ author\ is\ assigned\n
comment5.params=author
comment5.target=void\ setAuthor(Author)
comment5.text=\n\ Sets\ the\ author\ of\ the\ book.\n\ \n\ @param\ author\ the\ new\ author\ of\ the\ book\n
comment6.params=
comment6.target=LibraryMember\ getLibraryMember()
comment6.text=\n\ Gets\ the\ library\ member\ who\ has\ borrowed\ the\ book.\n\ \n\ @return\ the\ library\ member\ who\ borrowed\ the\ book,\ or\ null\ if\ the\ book\ is\ available\n
comment7.params=libraryMember
comment7.target=void\ setLibraryMember(LibraryMember)
comment7.text=\n\ Sets\ the\ library\ member\ who\ has\ borrowed\ the\ book.\n\ \n\ @param\ libraryMember\ the\ library\ member\ to\ assign\ as\ the\ borrower\n
comment8.params=
comment8.target=java.util.List\ getDamages()
comment8.text=\n\ Gets\ the\ list\ of\ recorded\ damages\ for\ the\ book.\n\ \n\ @return\ a\ list\ of\ damage\ descriptions\n
comment9.params=damages
comment9.target=void\ setDamages(java.util.List)
comment9.text=\n\ Replaces\ the\ list\ of\ damages\ with\ a\ new\ list.\n\ \n\ @param\ damages\ the\ new\ list\ of\ damages\n
numComments=13
